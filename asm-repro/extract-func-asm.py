import numpy as np
import pathlib
import subprocess

path_in_mod = "core/_multiarray_umath.cpython-312-darwin.so"
if np.__version__ >= "2.0":
    path_in_mod = "_" + path_in_mod
module_path = pathlib.Path(np.__file__).parent / path_in_mod


def iter_objdump(objdump):
    header = True
    for line in objdump.splitlines():
        if line.startswith("Disassembly of section"):
            header = False
            continue
        if header or not line:
            continue
        if line.strip().endswith(":"):
            [addr, name] = line.strip().split()
            assert name.startswith("<") and name.endswith(">:")
            yield addr, f"{name[1:-2]}:"
            continue
        [addr, _machine_code_hex, astext] = line.split(maxsplit=2)
        assert addr.endswith(":")
        yield addr[:-1], astext.strip()


def parse_jump(txt):
    if not txt.startswith("b") or txt[1:2] not in ". \t":
        return
    [opcode, offset, comment] = txt.split()
    assert offset.startswith("0x") and comment.startswith("<") and comment.endswith(">")
    return {
        "opcode": opcode,
        "offset": offset[2:],
        "label": comment[1:-1].replace("+0x", "_").lower(),
    }


def gen_asm_from_objdump(objdump):
    labels = {}

    for _, txt in iter_objdump(objdump):
        j = parse_jump(txt)
        if j is None:
            continue
        labels[j["offset"]] = j["label"]

    indent = "    "
    for addr, txt in iter_objdump(objdump):
        label = labels.get(addr)
        if label is not None:
            yield f"{label}:"
        if txt.endswith(":"):
            yield txt.lower()
            continue
        j = parse_jump(txt)
        if j is None:
            yield indent + txt.replace("\t", " ")
        else:
            yield indent + j["opcode"] + " " + j["label"]


header = """
// Auto-generated by extract-func-asm.py
// NOTE: This is actually the compiled code from numpy, so it inherits numpy's BSD license.

""".lstrip()

if __name__ == "__main__":
    objdump = subprocess.run(
        ["objdump", "--disassemble-symbols=_CDOUBLE_square", module_path],
        stdout=subprocess.PIPE,
    ).stdout.decode("utf-8")
    result = "\n".join(gen_asm_from_objdump(objdump))
    # Replace specific constant stored in specific place in numpy-1.26.4 for ARM macos
    result = result.replace(
        (
            "0x2366f0 <_xerbla$NEWLAPACK$ILP64.format+0x280>"
            if np.__version__ == "2.0.0"
            else "0x24aae0 <_xerbla_64_.format+0x1c0>"
        ),
        "xor_to_negate_second",
    )
    dest = "cdouble_square.s"
    if np.__version__ >= "2.0":
        dest = f"np2_{dest}"
    (pathlib.Path(__file__).parent / dest).write_text(header + result)
